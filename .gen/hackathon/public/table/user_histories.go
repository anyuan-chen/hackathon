//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserHistories = newUserHistoriesTable("public", "user_histories", "")

type userHistoriesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	DateChange   postgres.ColumnDate
	WhoChangedID postgres.ColumnInteger
	Name         postgres.ColumnString
	Company      postgres.ColumnString
	Email        postgres.ColumnString
	Phone        postgres.ColumnString
	Role         postgres.ColumnString
	HashedSecret postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserHistoriesTable struct {
	userHistoriesTable

	EXCLUDED userHistoriesTable
}

// AS creates new UserHistoriesTable with assigned alias
func (a UserHistoriesTable) AS(alias string) *UserHistoriesTable {
	return newUserHistoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserHistoriesTable with assigned schema name
func (a UserHistoriesTable) FromSchema(schemaName string) *UserHistoriesTable {
	return newUserHistoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserHistoriesTable with assigned table prefix
func (a UserHistoriesTable) WithPrefix(prefix string) *UserHistoriesTable {
	return newUserHistoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserHistoriesTable with assigned table suffix
func (a UserHistoriesTable) WithSuffix(suffix string) *UserHistoriesTable {
	return newUserHistoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserHistoriesTable(schemaName, tableName, alias string) *UserHistoriesTable {
	return &UserHistoriesTable{
		userHistoriesTable: newUserHistoriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUserHistoriesTableImpl("", "excluded", ""),
	}
}

func newUserHistoriesTableImpl(schemaName, tableName, alias string) userHistoriesTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		DateChangeColumn   = postgres.DateColumn("date_change")
		WhoChangedIDColumn = postgres.IntegerColumn("who_changed_id")
		NameColumn         = postgres.StringColumn("name")
		CompanyColumn      = postgres.StringColumn("company")
		EmailColumn        = postgres.StringColumn("email")
		PhoneColumn        = postgres.StringColumn("phone")
		RoleColumn         = postgres.StringColumn("role")
		HashedSecretColumn = postgres.StringColumn("hashed_secret")
		allColumns         = postgres.ColumnList{IDColumn, DateChangeColumn, WhoChangedIDColumn, NameColumn, CompanyColumn, EmailColumn, PhoneColumn, RoleColumn, HashedSecretColumn}
		mutableColumns     = postgres.ColumnList{DateChangeColumn, WhoChangedIDColumn, NameColumn, CompanyColumn, EmailColumn, PhoneColumn, RoleColumn, HashedSecretColumn}
	)

	return userHistoriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		DateChange:   DateChangeColumn,
		WhoChangedID: WhoChangedIDColumn,
		Name:         NameColumn,
		Company:      CompanyColumn,
		Email:        EmailColumn,
		Phone:        PhoneColumn,
		Role:         RoleColumn,
		HashedSecret: HashedSecretColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
