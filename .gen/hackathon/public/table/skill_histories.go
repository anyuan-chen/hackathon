//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SkillHistories = newSkillHistoriesTable("public", "skill_histories", "")

type skillHistoriesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	DateChange   postgres.ColumnDate
	WhoChangedID postgres.ColumnInteger
	UserID       postgres.ColumnInteger
	Skill        postgres.ColumnString
	Rating       postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SkillHistoriesTable struct {
	skillHistoriesTable

	EXCLUDED skillHistoriesTable
}

// AS creates new SkillHistoriesTable with assigned alias
func (a SkillHistoriesTable) AS(alias string) *SkillHistoriesTable {
	return newSkillHistoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SkillHistoriesTable with assigned schema name
func (a SkillHistoriesTable) FromSchema(schemaName string) *SkillHistoriesTable {
	return newSkillHistoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SkillHistoriesTable with assigned table prefix
func (a SkillHistoriesTable) WithPrefix(prefix string) *SkillHistoriesTable {
	return newSkillHistoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SkillHistoriesTable with assigned table suffix
func (a SkillHistoriesTable) WithSuffix(suffix string) *SkillHistoriesTable {
	return newSkillHistoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSkillHistoriesTable(schemaName, tableName, alias string) *SkillHistoriesTable {
	return &SkillHistoriesTable{
		skillHistoriesTable: newSkillHistoriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newSkillHistoriesTableImpl("", "excluded", ""),
	}
}

func newSkillHistoriesTableImpl(schemaName, tableName, alias string) skillHistoriesTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		DateChangeColumn   = postgres.DateColumn("date_change")
		WhoChangedIDColumn = postgres.IntegerColumn("who_changed_id")
		UserIDColumn       = postgres.IntegerColumn("user_id")
		SkillColumn        = postgres.StringColumn("skill")
		RatingColumn       = postgres.IntegerColumn("rating")
		allColumns         = postgres.ColumnList{IDColumn, DateChangeColumn, WhoChangedIDColumn, UserIDColumn, SkillColumn, RatingColumn}
		mutableColumns     = postgres.ColumnList{DateChangeColumn, WhoChangedIDColumn, UserIDColumn, SkillColumn, RatingColumn}
	)

	return skillHistoriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		DateChange:   DateChangeColumn,
		WhoChangedID: WhoChangedIDColumn,
		UserID:       UserIDColumn,
		Skill:        SkillColumn,
		Rating:       RatingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
