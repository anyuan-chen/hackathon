//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Users = newUsersTable("", "users", "")

type usersTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnString
	Name         sqlite.ColumnString
	Company      sqlite.ColumnString
	Email        sqlite.ColumnString
	Phone        sqlite.ColumnString
	Role         sqlite.ColumnString
	HashedSecret sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn           = sqlite.StringColumn("id")
		NameColumn         = sqlite.StringColumn("name")
		CompanyColumn      = sqlite.StringColumn("company")
		EmailColumn        = sqlite.StringColumn("email")
		PhoneColumn        = sqlite.StringColumn("phone")
		RoleColumn         = sqlite.StringColumn("role")
		HashedSecretColumn = sqlite.StringColumn("hashed_secret")
		allColumns         = sqlite.ColumnList{IDColumn, NameColumn, CompanyColumn, EmailColumn, PhoneColumn, RoleColumn, HashedSecretColumn}
		mutableColumns     = sqlite.ColumnList{NameColumn, CompanyColumn, EmailColumn, PhoneColumn, RoleColumn, HashedSecretColumn}
	)

	return usersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		Company:      CompanyColumn,
		Email:        EmailColumn,
		Phone:        PhoneColumn,
		Role:         RoleColumn,
		HashedSecret: HashedSecretColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
