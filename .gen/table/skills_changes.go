//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var SkillsChanges = newSkillsChangesTable("", "skills_changes", "")

type skillsChangesTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnInteger
	DateChange   sqlite.ColumnDate
	WhoChangedID sqlite.ColumnString
	UserID       sqlite.ColumnString
	Skill        sqlite.ColumnString
	Rating       sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type SkillsChangesTable struct {
	skillsChangesTable

	EXCLUDED skillsChangesTable
}

// AS creates new SkillsChangesTable with assigned alias
func (a SkillsChangesTable) AS(alias string) *SkillsChangesTable {
	return newSkillsChangesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SkillsChangesTable with assigned schema name
func (a SkillsChangesTable) FromSchema(schemaName string) *SkillsChangesTable {
	return newSkillsChangesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SkillsChangesTable with assigned table prefix
func (a SkillsChangesTable) WithPrefix(prefix string) *SkillsChangesTable {
	return newSkillsChangesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SkillsChangesTable with assigned table suffix
func (a SkillsChangesTable) WithSuffix(suffix string) *SkillsChangesTable {
	return newSkillsChangesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSkillsChangesTable(schemaName, tableName, alias string) *SkillsChangesTable {
	return &SkillsChangesTable{
		skillsChangesTable: newSkillsChangesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newSkillsChangesTableImpl("", "excluded", ""),
	}
}

func newSkillsChangesTableImpl(schemaName, tableName, alias string) skillsChangesTable {
	var (
		IDColumn           = sqlite.IntegerColumn("id")
		DateChangeColumn   = sqlite.DateColumn("date_change")
		WhoChangedIDColumn = sqlite.StringColumn("who_changed_id")
		UserIDColumn       = sqlite.StringColumn("user_id")
		SkillColumn        = sqlite.StringColumn("skill")
		RatingColumn       = sqlite.IntegerColumn("rating")
		allColumns         = sqlite.ColumnList{IDColumn, DateChangeColumn, WhoChangedIDColumn, UserIDColumn, SkillColumn, RatingColumn}
		mutableColumns     = sqlite.ColumnList{DateChangeColumn, WhoChangedIDColumn, UserIDColumn, SkillColumn, RatingColumn}
	)

	return skillsChangesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		DateChange:   DateChangeColumn,
		WhoChangedID: WhoChangedIDColumn,
		UserID:       UserIDColumn,
		Skill:        SkillColumn,
		Rating:       RatingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
