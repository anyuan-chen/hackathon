//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserHistory = newUserHistoryTable("", "user_history", "")

type userHistoryTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnInteger
	DateChange   sqlite.ColumnDate
	WhoChangedID sqlite.ColumnString
	Name         sqlite.ColumnString
	Company      sqlite.ColumnString
	Email        sqlite.ColumnString
	Phone        sqlite.ColumnString
	Role         sqlite.ColumnString
	HashedSecret sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UserHistoryTable struct {
	userHistoryTable

	EXCLUDED userHistoryTable
}

// AS creates new UserHistoryTable with assigned alias
func (a UserHistoryTable) AS(alias string) *UserHistoryTable {
	return newUserHistoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserHistoryTable with assigned schema name
func (a UserHistoryTable) FromSchema(schemaName string) *UserHistoryTable {
	return newUserHistoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserHistoryTable with assigned table prefix
func (a UserHistoryTable) WithPrefix(prefix string) *UserHistoryTable {
	return newUserHistoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserHistoryTable with assigned table suffix
func (a UserHistoryTable) WithSuffix(suffix string) *UserHistoryTable {
	return newUserHistoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserHistoryTable(schemaName, tableName, alias string) *UserHistoryTable {
	return &UserHistoryTable{
		userHistoryTable: newUserHistoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newUserHistoryTableImpl("", "excluded", ""),
	}
}

func newUserHistoryTableImpl(schemaName, tableName, alias string) userHistoryTable {
	var (
		IDColumn           = sqlite.IntegerColumn("id")
		DateChangeColumn   = sqlite.DateColumn("date_change")
		WhoChangedIDColumn = sqlite.StringColumn("who_changed_id")
		NameColumn         = sqlite.StringColumn("name")
		CompanyColumn      = sqlite.StringColumn("company")
		EmailColumn        = sqlite.StringColumn("email")
		PhoneColumn        = sqlite.StringColumn("phone")
		RoleColumn         = sqlite.StringColumn("role")
		HashedSecretColumn = sqlite.StringColumn("hashed_secret")
		allColumns         = sqlite.ColumnList{IDColumn, DateChangeColumn, WhoChangedIDColumn, NameColumn, CompanyColumn, EmailColumn, PhoneColumn, RoleColumn, HashedSecretColumn}
		mutableColumns     = sqlite.ColumnList{DateChangeColumn, WhoChangedIDColumn, NameColumn, CompanyColumn, EmailColumn, PhoneColumn, RoleColumn, HashedSecretColumn}
	)

	return userHistoryTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		DateChange:   DateChangeColumn,
		WhoChangedID: WhoChangedIDColumn,
		Name:         NameColumn,
		Company:      CompanyColumn,
		Email:        EmailColumn,
		Phone:        PhoneColumn,
		Role:         RoleColumn,
		HashedSecret: HashedSecretColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
